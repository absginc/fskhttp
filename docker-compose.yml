version: '3.3'

services:
  nginx:
    image: nginx:alpine
    container_name: fskhttp-nginx
    ports:
      - "8080:80"            # Expose host:8080 â†’ container:80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - fskhttp-1
      - fskhttp-2
    networks:
      - fsk-network

  fskhttp-1:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fsk-network

  fskhttp-2:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fsk-network

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - fsk-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - fsk-network

volumes:
  prometheus_data:
  grafana_data:

networks:
  fsk-network:
    driver: bridge

# Scale up command: docker-compose up --scale fskhttp-1=3 --scale fskhttp-2=3
